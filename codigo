import random
import matplotlib.pyplot as plt

class GameAgent:
    def __init__(self, secret_number=None, max_attempts=5, number_type='ambos'):
       
        if secret_number is None:
            while True:
                self.secret_number = random.randint(1, 100)  
                if number_type == 'par' and self.secret_number % 2 == 0:
                    break
                elif number_type == 'ímpar' and self.secret_number % 2 != 0:
                    break
                elif number_type == 'ambos':
                    break
        else:
            self.secret_number = secret_number
        
        self.max_attempts = max_attempts
        self.attempts = 0
        self.state = "Esperando tentativa"
        self.history = []  
        self.last_3_attempts = []  
        self.number_type = number_type
        self.score = 100  # Pontuação 

    def make_guess(self, guess):
        self.attempts += 1
        self.history.append(guess)

       
        self.last_3_attempts.append(guess)
        if len(self.last_3_attempts) > 3:
            self.last_3_attempts.pop(0)

        # Verifica se o palpite é válido
        if self.number_type == 'par' and guess % 2 != 0:
            return "O número deve ser par. Tente novamente."
        elif self.number_type == 'ímpar' and guess % 2 == 0:
            return "O número deve ser ímpar. Tente novamente."

        # Ajusta a pontuação baseada na proximidade
        distance = abs(self.secret_number - guess)
        self.score -= min(10, distance) 

        if guess == self.secret_number:
            self.state = "Acertou!"
            return f"Parabéns! Você acertou o número. Sua pontuação final é {self.score}."
        elif self.attempts >= self.max_attempts:
            self.state = "Fim do jogo"
            return f"Game Over! O número era {self.secret_number}. Sua pontuação final é {self.score}."
        elif guess < self.secret_number:
            self.state = "Tentativa errada (muito baixo)"
            return "O número é maior. Tente novamente."
        else:
            self.state = "Tentativa errada (muito alto)"
            return "O número é menor. Tente novamente."

    def get_last_3_attempts(self):
        return self.last_3_attempts


def plot_attempts(agent):
    plt.figure(figsize=(8,5))
    plt.plot(range(1, len(agent.history) + 1), agent.history, marker='o', linestyle='-', label='Tentativas')

   
    plt.axhline(y=agent.secret_number, color='r', linestyle='--', label='Número Secreto')

    
    for i in range(1, len(agent.history)):
        guess = agent.history[i]
        distance = abs(agent.secret_number - guess)
        color = 'green' if distance <= 5 else 'yellow' if distance <= 15 else 'red'
        plt.plot([i, i], [guess, agent.secret_number], color=color, lw=2)

    plt.xlabel("Tentativas")
    plt.ylabel("Valor do Palpite")
    plt.title(f"Evolução das Tentativas do Jogador (Pontuação final: {agent.score})")
    plt.legend()
    plt.show()


def start_game():
    number_type = input("Escolha o tipo de número (par, ímpar, ambos): ").lower()
    max_attempts = int(input("Quantas tentativas você deseja? (Máximo de 20): "))

    agent = GameAgent(max_attempts=max_attempts, number_type=number_type)

    while agent.state not in ["Acertou!", "Fim do jogo"]:
        guess = int(input("Digite um número: "))
        print(agent.make_guess(guess))

    print(f"Últimas 3 tentativas: {agent.get_last_3_attempts()}")
    plot_attempts(agent)

    
    play_again = input("Você quer jogar novamente? (sim/não): ").lower()
    if play_again == "sim":
        start_game()  
    else:
        print("Obrigado por jogar!")

# Iniciar o jogo
start_game()
